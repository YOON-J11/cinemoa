<link rel="stylesheet" href="/css/movies.css" />
{{> common/header }}
<a href="/movies/new">등록하기</a>
<a href="/movies?status=NOT_SHOWING">상영안함</a>

<div class="container movies">
    <div class="movie-chart">
        <div class="tit">
            <h1>무비차트</h1>
            <div class="status-tab">
                <a href="/movies" class="tab-item">무비차트</a>
                <a href="/movies?status=COMING_SOON" class="tab-item">상영예정작</a>
            </div>
        </div>
        <div class="sort">
            <div class="onair-condition">
                <div class="toggle-switch-wrapper">
                    <input type="checkbox" name="onairToggle" class="mobileToggle" id="onairToggle">
                    <label for="onairToggle"></label>
                </div>
                <p class="toggle-text">개봉작만</p>
            </div>
            <div class="input-wrap movie-search">
                <input type="text" id="searchKeyword" title="영화 검색" placeholder="영화명, 감독명, 배우명 검색">
                <button type="button" class="btn-search-input" id="btnSearch"><img width="20" height="20" src="https://img.icons8.com/ios-glyphs/20/search--v1.png" alt="search--v1"/></button>
            </div>
        </div>

        <div class="movie-list">
            {{#movies.content}}
                <div class="item">
                    <div class="item-wrap">

                        {{#mainImageUrl}}
                        <div class="main-image">
                            <div class="over_box">
                                <div class="inner">
                                    <a href="/ticketing/{{movieId}}">예매하기</a>
                                    <a href="/movies/{{movieId}}">상세정보</a>
                                </div>
                            </div>
                            <img src="/images/movie/{{mainImageUrl}}" alt="{{title}}">
                        </div>
                        {{/mainImageUrl}}
                        {{^mainImageUrl}}
                            <div class="main-image empty">>이미지 없음</div>
                        {{/mainImageUrl}}
                        <div class="item-tit">
                            <p class="age">
                                {{#ageRating}}
                                    {{#isAll}}
                                        <span class="movie-grade age-all"></span>
                                    {{/isAll}}
                                    {{#is12}}
                                        <span class="movie-grade age-12"></span>
                                    {{/is12}}
                                    {{#is15}}
                                        <span class="movie-grade age-15"></span>
                                    {{/is15}}
                                    {{#is19}}
                                        <span class="movie-grade age-19"></span>
                                    {{/is19}}
                                {{/ageRating}}
                            </p>
                            <h5>{{title}}</h5>
                        </div>
                        <div class="item-info">
                            <span class="rate">예매율 <span class="rating">{{reservationRate}}</span>%</span>
                            <span class="date">
                                {{#releaseDate}}
                                    개봉일 <span class="format-date">{{releaseDate}}</span>
                                {{/releaseDate}}
                                {{^releaseDate}}개봉일 미정{{/releaseDate}}
                            </span>
                        </div>
                        <div class="item-btn">
                            <div class="like-btn">
                                <button class="heart-button">
                                <svg width="15px" height="15px" viewBox="0 0 15 15" version="1.1" id="heart" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M13.91,6.75c-1.17,2.25-4.3,5.31-6.07,6.94c-0.1903,0.1718-0.4797,0.1718-0.67,0C5.39,12.06,2.26,9,1.09,6.75&#xA;&#x9;C-1.48,1.8,5-1.5,7.5,3.45C10-1.5,16.48,1.8,13.91,6.75z" stroke="black"/>
                                </svg>
                                </button>
                                <span class="likesCount">{{likesCount}}</span>
                            </div>
                            <a href="/ticketing/{{movieId}}" class="reservation-btn">예매하기</a>
                        </div>
                    </div>
                </div>
            {{/movies.content}}
        </div>
        <div class="more-btn-wrap">
            {{#movies.hasNext}}
                <button type="button" class="btn-more" id="btnLoadMore" data-next-page="{{nextPageNumber}}"><span>더보기</span><img src="https://img.megabox.co.kr/static/pc/images/common/ico/ico-btn-more-arr.png"></button>
            {{/movies.hasNext}}
        </div>
    </div>
</div>

<script>
    // 숫자를 K, M, G, T 형식으로 변환하는 함수 (전역으로 정의)
    function formatNumber(num) {
        if (num < 1000) {
            return num;
        } else if (num < 1000000) {
            return (Math.floor(num / 100) / 10) + 'K';
        } else if (num < 1000000000) {
            return (Math.floor(num / 100000) / 10) + 'M';
        } else if (num < 1000000000000) {
            return (Math.floor(num / 100000000) / 10) + 'G';
        } else {
            return (Math.floor(num / 100000000000) / 10) + 'T';
        }
    }

    // 영화 아이템에 대한 동적 동작을 적용하는 함수
    function applyBehaviorsToMovieItems(container) {
        // 날짜 형식 변환 (yyyy-MM-dd -> yyyy.MM.dd)
        container.querySelectorAll('.format-date').forEach(function(element) {
            const originalDate = element.textContent;
            if (originalDate) {
                const parts = originalDate.split('-');
                if (parts.length === 3) {
                    element.textContent = parts.join('.');
                }
            }
        });

        // 'rating' 클래스를 가진 모든 요소를 찾아서 소수점 첫째자리까지만 표시
        container.querySelectorAll('.rating').forEach(function(element) {
            const text = element.textContent;
            const value = parseFloat(text);
            if (!isNaN(value)) {
                const truncatedValue = Math.floor(value * 10) / 10;
                if (text.includes('%')) {
                    element.textContent = truncatedValue + '%';
                } else {
                    element.textContent = truncatedValue;
                }
            }
        });

        // 좋아요 버튼 클릭 이벤트 처리
        container.querySelectorAll(".heart-button").forEach((button) => {
            // 새로 추가되는 요소에만 이벤트 리스너를 추가하는 것이 일반적이지만,
            // 여기서는 container 전체를 다시 스캔하여 적용합니다.
            // (이미 리스너가 있는 경우 중복 추가될 수 있으나, 대부분의 경우 문제가 되지 않습니다.)
            button.addEventListener("click", (event) => {
                button.classList.toggle("active");
            });
        });

        // 좋아요 개수를 표시하는 모든 span 요소
        container.querySelectorAll('.likesCount').forEach(function(element) {
            const count = parseInt(element.textContent);
            if (!isNaN(count)) {
                element.textContent = formatNumber(count);
            }
        });
    }

    document.addEventListener('DOMContentLoaded', function() {
        // 현재 URL 가져오기
        const urlParams = new URLSearchParams(window.location.search);
        const status = urlParams.get('status');

        // sort 클래스 요소 선택 및 표시/숨김
        const sortElement = document.querySelector('.sort');
        if (status === 'COMING_SOON') {
            if (sortElement) {
                sortElement.style.display = 'none';
            }
        } else {
            if (sortElement) {
                sortElement.style.display = 'flex';
            }
        }

        // 탭 활성화 코드
        const tabItems = document.querySelectorAll('.tab-item');
        tabItems.forEach(function(item) {
            const itemUrl = item.getAttribute('href');
            if (itemUrl === '/movies') {
                if (status === null || status === 'NOW_SHOWING') {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
            } else {
                const itemStatus = new URLSearchParams(itemUrl.split('?')[1]).get('status');
                if (status !== null && status === itemStatus) {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
            }
        });

        // 온에어 토글 체크박스 코드
        const onairToggle = document.getElementById('onairToggle');
        if (onairToggle) {
            if (status === 'NOW_SHOWING') {
                onairToggle.checked = true;
            } else {
                onairToggle.checked = false;
            }
            onairToggle.addEventListener('change', function() {
                if (this.checked) {
                    window.location.href = '/movies?status=NOW_SHOWING';
                } else {
                    window.location.href = '/movies';
                }
            });
        }

        // 검색 버튼 클릭 이벤트 처리
        const btnSearch = document.getElementById('btnSearch');
        const searchKeyword = document.getElementById('searchKeyword');
        if (btnSearch && searchKeyword) {
            btnSearch.addEventListener('click', function() {
                performSearch();
            });
            searchKeyword.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    performSearch();
                }
            });

            function performSearch() {
                const keyword = searchKeyword.value.trim();
                if (keyword) {
                    const currentStatus = urlParams.get('status');
                    let searchUrl = '/movies/search?keyword=' + encodeURIComponent(keyword);
                    if (currentStatus) {
                        searchUrl += '&status=' + currentStatus;
                    }
                    window.location.href = searchUrl;
                } else {
                    alert('검색할 영화명을 입력하세요.');
                }
            }
        }

        // --- 핵심 수정 부분 ---

        // 초기 로드된 영화 목록에 동작 적용
        const movieListContainer = document.querySelector('.movie-list');
        if (movieListContainer) {
            applyBehaviorsToMovieItems(movieListContainer);
        }

        // 더보기 버튼 이벤트 처리
        const btnLoadMore = document.getElementById('btnLoadMore');
        if (btnLoadMore) {
            btnLoadMore.addEventListener('click', function() {
                const nextPage = this.getAttribute('data-next-page');
                const currentStatus = urlParams.get('status');

                let url = `/movies/loadMore?page=${nextPage}`;
                if (currentStatus) {
                    url += `&status=${currentStatus}`;
                }

                this.innerHTML = '로딩 중...';
                this.disabled = true;

                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.text();
                    })
                    .then(html => {
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = html;
                        const newMovies = tempDiv.querySelectorAll('.item');

                        newMovies.forEach(movie => {
                            movieListContainer.appendChild(movie);
                        });

                        // 새로 추가된 영화 목록에 동작 적용
                        applyBehaviorsToMovieItems(movieListContainer);

                        const hasNextPageElement = tempDiv.querySelector('[data-has-next]');
                        const hasNextPage = hasNextPageElement ? hasNextPageElement.getAttribute('data-has-next') === 'true' : false;

                        if (hasNextPage) {
                            this.setAttribute('data-next-page', parseInt(nextPage) + 1);
                            this.innerHTML = '더보기';
                            this.disabled = false;
                        } else {
                            this.parentNode.innerHTML = '';
                        }
                    })
                    .catch(error => {
                        console.error('영화를 불러오는 중 오류가 발생했습니다:', error);
                        this.innerHTML = '다시 시도';
                        this.disabled = false;
                    });
            });
        }
    });
</script>

{{> common/footer }}