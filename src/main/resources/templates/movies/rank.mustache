<link rel="stylesheet" href="/css/movies.css" />
<div class="box-office movies">
    <div class="container movie-chart">
        <div class="top">
            <p>박스오피스</p>
            <a href="/movies">더 많은 영화 보기<img src="https://img.megabox.co.kr/static/pc/images/common/ico/ico-more-cross-gray.png"></a>
        </div>
        <div class="movie-list">
            {{#movies.content}}
                <div class="item">
                    <div class="item-wrap">
                        {{#mainImageUrl}}
                            <div class="main-image">
                                <div class="over_box">
                                    <div class="inner">
                                        <a href="/ticketing/{{movieId}}">예매하기</a>
                                        <a href="/movies/{{movieId}}">상세정보</a>
                                    </div>
                                </div>
                                <img src="/images/movie/{{mainImageUrl}}" alt="{{title}}">
                            </div>
                        {{/mainImageUrl}}
                        {{^mainImageUrl}}
                            <div class="main-image empty">>이미지 없음</div>
                        {{/mainImageUrl}}
                        <div class="item-tit">
                            <p class="age">
                                {{#ageRating}}
                                    {{#isAll}}
                                        <span class="movie-grade age-all"></span>
                                    {{/isAll}}
                                    {{#is12}}
                                        <span class="movie-grade age-12"></span>
                                    {{/is12}}
                                    {{#is15}}
                                        <span class="movie-grade age-15"></span>
                                    {{/is15}}
                                    {{#is19}}
                                        <span class="movie-grade age-19"></span>
                                    {{/is19}}
                                {{/ageRating}}
                            </p>
                            <h5>{{title}}</h5>
                        </div>
                        <div class="item-info">
                            <span class="rate">예매율 <span class="rating">{{reservationRate}}</span>%</span>
                            <span class="date">
                                {{#releaseDate}}
                                    개봉일 <span class="format-date">{{releaseDate}}</span>
                                {{/releaseDate}}
                                {{^releaseDate}}개봉일 미정{{/releaseDate}}
                            </span>
                        </div>
                        <div class="item-btn">
                            <div class="like-btn" data-movie-id="{{movieId}}">
                                {{#loginMember}}
                                    <button class="heart-button {{#likedByCurrentUser}}active{{/likedByCurrentUser}}">
                                        <svg width="15px" height="15px" viewBox="0 0 15 15" version="1.1" id="heart" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M13.91,6.75c-1.17,2.25-4.3,5.31-6.07,6.94c-0.1903,0.1718-0.4797,0.1718-0.67,0C5.39,12.06,2.26,9,1.09,6.75&#xA;&#x9;C-1.48,1.8,5-1.5,7.5,3.45C10-1.5,16.48,1.8,13.91,6.75z" stroke="black"/>
                                        </svg>
                                    </button>
                                {{/loginMember}}
                                {{^loginMember}}
                                    <a href="/member/login">
                                        <button class="heart-button disable">
                                            <svg width="15px" height="15px" viewBox="0 0 15 15" version="1.1" id="heart" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M13.91,6.75c-1.17,2.25-4.3,5.31-6.07,6.94c-0.1903,0.1718-0.4797,0.1718-0.67,0C5.39,12.06,2.26,9,1.09,6.75&#xA;&#x9;C-1.48,1.8,5-1.5,7.5,3.45C10-1.5,16.48,1.8,13.91,6.75z" stroke="black"/>
                                            </svg>
                                        </button>
                                    </a>
                                {{/loginMember}}
                                <span class="likesCount">{{likesCount}}</span>
                            </div>
                            <a href="/ticketing/{{movieId}}" class="reservation-btn">예매하기</a>
                        </div>
                    </div>
                </div>
            {{/movies.content}}
        </div>
    </div>
</div>

<script>
    // 숫자를 K, M, G, T 형식으로 변환하는 함수 (전역으로 정의)
    function formatNumber(num) {
        if (num < 1000) {
            return num.toString();
        } else if (num < 1000000) {
            return (Math.floor(num / 100) / 10) + 'K';
        } else if (num < 1000000000) {
            return (Math.floor(num / 100000) / 10) + 'M';
        } else if (num < 1000000000000) {
            return (Math.floor(num / 100000000) / 10) + 'G';
        } else {
            return (Math.floor(num / 100000000000) / 10) + 'T';
        }
    }

    function parseFormattedNumber(text) {
        const unitMatch = text.trim().match(/([0-9.]+)([KMGT]?)$/);
        if (!unitMatch) return 0;

        const value = parseFloat(unitMatch[1]);
        const unit = unitMatch[2];

        switch (unit) {
            case 'K': return value * 1_000;
            case 'M': return value * 1_000_000;
            case 'G': return value * 1_000_000_000;
            case 'T': return value * 1_000_000_000_000;
            default: return value;
        }
    }

    // 영화 아이템에 대한 동적 동작을 적용하는 함수
    function applyBehaviorsToMovieItems(container) {
        // 날짜 형식 변환 (yyyy-MM-dd -> yyyy.MM.dd)
        container.querySelectorAll('.format-date').forEach(function(element) {
            const originalDate = element.textContent;
            if (originalDate) {
                const parts = originalDate.split('-');
                if (parts.length === 3) {
                    element.textContent = parts.join('.');
                }
            }
        });

        // 'rating' 클래스를 가진 모든 요소를 찾아서 소수점 첫째자리까지만 표시
        container.querySelectorAll('.rating').forEach(function(element) {
            const text = element.textContent;
            const value = parseFloat(text);
            if (!isNaN(value)) {
                const truncatedValue = Math.floor(value * 10) / 10;
                if (text.includes('%')) {
                    element.textContent = truncatedValue + '%';
                } else {
                    element.textContent = truncatedValue;
                }
            }
        });

        // 좋아요 수 포맷 처리 (기존에 이미 포맷된 값이면 무시)
        container.querySelectorAll('.likesCount').forEach(function(element) {
            const originalText = element.textContent.trim();

            // 이미 단위가 붙은 경우 건너뛰기 (예: '2.5K')
            if (/[KMGT]$/.test(originalText)) return;

            const count = parseInt(originalText.replace(/,/g, ''));
            if (!isNaN(count)) {
                element.textContent = formatNumber(count);
            }
        });

        // ========== 좋아요 버튼 이벤트 리스너 추가 시작 ==========
        container.querySelectorAll('.like-btn').forEach(likeBtnDiv => {
            const button = likeBtnDiv.querySelector('.heart-button');
            const likesCountSpan = likeBtnDiv.querySelector('.likesCount');
            const movieId = likeBtnDiv.dataset.movieId;

            if (!button || !likesCountSpan || !movieId) {
                console.warn("좋아요 버튼 요소 또는 movieId를 찾을 수 없습니다.");
                return;
            }

            button.addEventListener('click', function () {
                fetch(`/api/movies/${movieId}/like`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (response.ok) {
                        return response.text();
                    } else {
                        return response.text().then(errorMessage => {
                            throw new Error(errorMessage || "좋아요 처리 중 알 수 없는 오류가 발생했습니다.");
                        });
                    }
                })
                .then(message => {
                    alert(message);

                    let currentLikes = parseFormattedNumber(likesCountSpan.textContent);

                    if (message.includes("추가되었습니다")) {
                        currentLikes++;
                        likesCountSpan.textContent = formatNumber(currentLikes);
                        button.classList.add('active');
                    } else if (message.includes("취소되었습니다")) {
                        currentLikes--;
                        likesCountSpan.textContent = formatNumber(currentLikes);
                        button.classList.remove('active');
                    }
                })
                .catch(error => {
                    console.error('좋아요 처리 중 에러:', error);
                    alert('좋아요 처리 중 에러가 발생했습니다: ' + error.message);
                });
            });

        });
        // ========== 좋아요 버튼 이벤트 리스너 추가 끝 ==========
    }

    document.addEventListener('DOMContentLoaded', function() {
        // 현재 URL 가져오기
        const urlParams = new URLSearchParams(window.location.search);
        const status = urlParams.get('status');

        // sort 클래스 요소 선택 및 표시/숨김
        const sortElement = document.querySelector('.sort');
        if (status === 'COMING_SOON') {
            if (sortElement) {
                sortElement.style.display = 'none';
            }
        } else {
            if (sortElement) {
                sortElement.style.display = 'flex';
            }
        }

         // 초기 로드 시 기존 영화 아이템들에 대한 동작 적용
        applyBehaviorsToMovieItems(document.querySelector('.movie-list'));

        // 탭 활성화 코드
        const tabItems = document.querySelectorAll('.tab-item');
        tabItems.forEach(function(item) {
            const itemUrl = item.getAttribute('href');
            if (itemUrl === '/movies') {
                if (status === null || status === 'NOW_SHOWING') {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
            } else {
                const itemStatus = new URLSearchParams(itemUrl.split('?')[1]).get('status');
                if (status !== null && status === itemStatus) {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
            }
        });

        // 초기 로드된 영화 목록에 동작 적용
        const movieListContainer = document.querySelector('.movie-list');
        if (!movieListContainer) {
            console.error('movieListContainer가 존재하지 않습니다.');
            return;
        }

        // 날짜, 좋아요 수 포맷 등 초기 적용
        applyBehaviorsToMovieItems(movieListContainer);

    });
</script>